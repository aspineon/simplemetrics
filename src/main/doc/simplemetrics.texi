\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename simplemagic.info
@settitle SimpleMagic Documentation
@headings double
@c %**end of header

@c ----------------------------------------------------------------
@set simplemetrics_version 0.5
@set simplemetrics_year 2015
@set simplemetrics_date December @value{simplemetrics_year}
@set package SimpleMetrics
@c ----------------------------------------------------------------

@titlepage
@headings off
@title SimpleMetrics Package
@subtitle Version @value{simplemetrics_version}
@subtitle @value{simplemetrics_date}
@author Gray Watson

@page
This manual is licensed by Gray Watson under the Creative Commons Attribution-Share Alike 3.0 License.

Permission is granted to make and distribute verbatim copies of this manual provided this license
notice and this permission notice are preserved on all copies.
@end titlepage

@c ----------------------------------------------------------------

@c In the printed manual, we put the contents at the front.  For the digital manuals it is at the end. 
@iftex
@contents
@end iftex

@c ----------------------------------------------------------------
@node Top, Quick Start, (dir), (dir)
@top SimpleMetrics
@everyheading @thischapter @| @thispage @| @today{}

Version @value{simplemetrics_version} -- @value{simplemetrics_date}

@cindex introduction
@cindex author
@cindex simple metrics
This package provides some simple metrics and associated operations that allow for the recording of application metrics
and persisting them to various different local or cloud storage/metric systems.  You code registers metrics
and then doesn't have to not worry about how they are managed or persisted.

To get started quickly using SimpleMetrics, @pxref{Quick Start}.
@ifhtml
There is also a @uref{http://256.com/sources/simplemetrics/docs/simplemetrics.pdf, PDF version of this documentation}.
@end ifhtml
@iftex
There is also a @uref{http://256.com/sources/simplemetrics/docs/simplemetrics.html, HTML version of this documentation}.
@end iftex

Gray Watson @uref{http://256.com/gray/}

@menu
* Quick Start::                Start using SimpleMetrics quickly.
* Using::                      How to use SimpleMetrics.
* License::                    Open Source license for the project.
* Index of Concepts::          Index of concepts in the manual.
@end menu

@c ----------------------------------------------------------------
@node Quick Start, Using, Top, Top
@chapter Start Using Quickly

@cindex getting started
@cindex how to get started
@cindex quick start
To use SimpleMetrics you need to do the following steps.  For more information, @pxref{Using}.

@enumerate

@item Download SimpleMetrics from the @uref{http://256.com/sources/simplemetrics/releases/, SimpleMetrics release page}.
@xref{Downloading}.

@item Create an instance of the @code{MetricsManager} class which manages the metrics in our application.

@example
MetricsManager metricsManager = new MetricsManager();
@end example

@item Create a persister such as the @code{LoggingMetricsPersister} which logs the metrics and values to
@code{java.util.Logger}.

@example
LoggingMetricsPersister persister =
   new LoggingMetricsPersister();
metricsManager.registerMetric(hitCounter);
@end example

@item Create at least one metric which monitors a particular application value, and register it with the 
@code{LoggingMetricsPersister}.

@example
ControlledMetricAccum hitCounter =
   new ControlledMetricAccum("example", null, "hits",
      "number of hits to the cache", null);
metricsManager.registerMetric(hitCounter);
@end example

@item Possibly use the @code{MetricsPersisterJob} to start a background thread that calls @code{persist()} on
the @code{MetricsManager} every so often automatically.  Otherwise you will need to do so using some other mechanism.

@example
MetricsPersisterJob persisterThread =
   new MetricsPersisterJob(manager, 1000, 1000, true);
@end example

@end enumerate

For somewhat more extensive instructions, @pxref{Using}.

@c ----------------------------------------------------------------
@node Using, Downloading, Quick Start, Top
@chapter Using SimpleMetrics

@cindex how to use
@cindex using SimpleMetrics
@menu
* Downloading ::                  Downloading the SimpleMetrics jar.
* Creating a MetricsManager ::    Creating a MetricsManager instance.
* Using Metrics Persisters ::     Using or creating a metrics persister.
* Registering Metrics ::          Creating and registering metrics.
* Using MetricsUpdater ::         How to update metric values.
* Built in Utilities ::           How to use built-in utilities.
* Using SimpleJMX ::              Publishing metric information via JMX.
* Maven ::                        How to use with Maven.
@end menu

@c ----------------------------------------------------------------
@node Downloading, Creating a MetricsManager, Using, Using
@section Downloading Jar

@cindex how to download the jars
@cindex downloading the jars
@cindex where to get new jars
To get started with SimpleMetrics, you will need to download the jar file.  The @uref{http://256.com/sources/simplemetrics/releases/, SimpleMetrics
release page} is the default repository but the jars are also available from the @uref{http://repo1.maven.org/maven2/com/j256/simplemetrics/,
central maven repository}.

The code works with Java 6 or later.

@c ----------------------------------------------------------------
@node Creating a MetricsManager, Using Metrics Persisters, Downloading, Using
@section Creating a MetricsManager Instance

@cindex MetricsManager
@cindex managing the metrics
@cindex SimpleJMX
The @code{MetricsManager} is the class which manages the metrics in the application, updates the values of the metrics
when necessary, and persisting the metrics to disk or network when requested to do so.  You need to set at least one metrics
persister on the manager and then register metrics from various places in your application. @code{MetricsManager} also
supports @code{SimpleJmx} annotations which allow you to publish the metrics and view them via JMX. 

@example
MetricsManager metricsManager = new MetricsManager();
@end example

@c ----------------------------------------------------------------
@node Using Metrics Persisters, Registering Metrics, Creating a MetricsManager, Using
@section Using a Metrics Persister

@cindex metrics persisters
@cindex persisting metrics
@cindex storing metrics
@cindex cloud service
@cindex save metrics to disk
@cindex logging metrics
Once you have created your @code{MetricsManager} you should set metrics persister classes on it.  Metrics persisters
are the classes which are responsible for saving the metrics information to disk, cloud-service, or other archive so
they can be reported on and stored for later use.

@cindex MetricValuesPersister
@cindex MetricDetailsPersister
@cindex MetricValueDetails
@cindex minimum value
@cindex maximum value
@cindex average value
@cindex number of samples
@cindex samples
Persisters implement either the @code{MetricValuesPersister} or @code{MetricDetailsPersister} interfaces.  The value persister
gets the metric values as a simple @code{Number} class.  The details persister provides more extensive information on
the metrics such as number of samples, average, minimum, and maximum values through the @code{MetricValueDetails} class.

There are a couple simple persister implementations that some with the library although they may only be useful as
implementation examples;

@itemize @bullet

@item @code{LoggingMetricsPersister} - Logs metrics and their values to @code{java.util.Logger}.  This can be used as an
implementation example so you can log metrics to your application's primary logging class such as @code{log4j}.

@item @code{SystemOutMetricsPersister} - Prints metrics and their values to @code{System.out}.

@item @code{TextFileMetricsPersister} - Writes metrics and their values to a text-file on the file-system.  This text file
can then be imported into some reporting system.  It is able to cleanup old metrics files with the
@code{cleanMetricFilesOlderThanMillis(...)} method.

@end itemize

Persisters are set on the @code{MetricsManager}:

@example
// persisters that persist a number per metric
metricsManager.setMetricValuesPersisters(
   new MetricDetailsPersister[] @{ @dots{} @};
// persisters that persist metric details
metricsManager.setMetricDetailsPersisters(
   new MetricDetailsPersister[] @{ @dots{} @};
@end example

@c ----------------------------------------------------------------
@node Registering Metrics, Using MetricsUpdater, Using Metrics Persisters, Using
@section Creating and Registering Metrics

@cindex creating metrics
@cindex registering metrics
@cindex metrics
Once you have created your @code{MetricsManager} and created your persisters, you are ready to start creating and 
registering metrics with the manager.  Metrics are the classes which keep track of the name of the metric as well as
it's associated value(s).  For example, let's say we wanted to count the number of web-requests made to our web-server
so we can graph it over time.  We might create a metric like the following and register it on the @code{MetricsManager}:

@example
ControlledMetricAccum webRequestMetric =
   new ControlledMetricAccum("web", "server", "requests",
      "number of requests handled by our web-server", null);
metricsManager.registerMetric(webRequestMetric);
@end example

Whenever a request cames in, you just have to increment the metric:

@example
// count a web-request
webRequestMetric.increment();
@end example

The @code{MetricsManager} takes care of persisting the value to disk or network and it also resets the value after it 
is persisted so the counts per minute (or whatever your persist frequency is) will be accurate.

There are a couple of different types of metrics that are built into the library. 

@cindex ControlledMetricAccum
@cindex accumulator metric
@cindex increment, metric
@cindex ControlledMetricValue
@cindex value metric
@cindex ControlledMetricTimer
@cindex time tracking
@cindex ControlledMetricRatio
@cindex ratio metric
@itemize @bullet

@item @code{ControlledMetricAccum} - A metric that accumulates in value.  This is used when we are counting some sort
of event light a web-server request or a thrown exception.  It supports an @code{increment()} method although the adjust
will add any value to the metric.

@item @code{ControlledMetricValue} - A metric whose value can go up or down.  This is used when we are monitoring how
much memory the JVM is using or a cache-hit percentage.  We often use a @code{MetricsUpdater} when dealing with values.
@xref{Using MetricsUpdater}.

@item @code{ControlledMetricTimer} - For metrics that are tracking how long a particular operation takes, this class is
useful for doing so.  It has a @code{start()} and @code{stop()} method which easily records the elapsed time in
milliseconds given that it extends @code{ControlledMetricValue}.

@item @code{ControlledMetricRatio} - This metric separates the numerator from the denominator to keep good precision
when recording ratios.  You could track cache hit/miss ratios or other information with this.

@end itemize

@cindex BaseControlledMetric
@cindex metrics base class
@cindex ControlledMetric interface
@cindex metrics interface
If these metric types don't fully meet your needs, you can define others that implement the @code{ControlledMetric}
interface and probably extend the @code{BaseControlledMetric} class.

@c ----------------------------------------------------------------
@node Using MetricsUpdater, Built in Utilities, Registering Metrics, Using
@section Updating Metric Values

In many situations, you may poll a value from another object and update a metric at that time.  The @code{MetricsManager}
has support for classes that implement the @code{MetricsUpdater} interface that can be registered on the manager.
Whenever values are to be persisted, the @code{MetricsManager} will call the configured updaters beforehand so they can
calculate or poll the values for their metrics.

For example, let's say you were tracking how much memory your were using in your system.  You would register your
memory metric with the @code{MetricsManager} and also register yourself with the @code{MetricsManager} as an updater.
The @code{MetricsManager} will call your @code{updateMetrics()} method which gives you an opportunity to calculate
how much memory your code is using and update the metric with the information.

@c ----------------------------------------------------------------
@node Built in Utilities, Using SimpleJMX, Using MetricsUpdater, Using
@section Using the Built-In Utilities

There are a couple of built-in utility classes which are useful for most applications to utilize.

@itemize @bullet

@item @code{SystemMetricsPublisher} - Publishes a number of useful bits of information from the JVM: number of threads,
total memory used, maximum memory used, free memory, current heap size, number of loaded classes, total process CPU time,
thread load average percentage, old gen memory presentage, process load average percentage.

@item @code{FileMetricsPublisher} - Reads values from files on the file system that are then published via metrics.
This is used to read numbers from files in thre @code{/proc} file-system on linux.  A common file metric that you might
want to publish is the number of open file-descriptors being used by the JVM.

@end itemize

@c ----------------------------------------------------------------
@node Using SimpleJMX, Maven, Built in Utilities, Using
@section Publishing Metrics Via JMX

@cindex SimpleJMX
@cindex JMX usage
@cindex publishing metrics using JMX
@cindex JmxServer
The library uses the SimpleJMX library to allow for easy publishing of metric values via JMX.  It is optional
to do so but you can set the @code{JmxServer} on the @code{MetricsManager} and metrics will be registered to the
@code{JmxServer} and publishd into JMX folders.   For more information about SimpleJMX, see the @uref{http://256.com/sources/simplejmx/,
SimpleJMX home page}.

@c ----------------------------------------------------------------
@node Maven, License, Using SimpleJMX, Using
@section Using With Maven

@cindex Maven, use with
@cindex pom.xml dependency
To use SimpleMetrics with maven, include the following dependency in your @file{pom.xml} file:

@example
<dependency>
	<groupId>com.j256.simplemetrics</groupId>
	<artifactId>simplemetrics</artifactId>
	<version>@value{simplemetrics_version}</version>
</dependency>
@end example 

@c ----------------------------------------------------------------
@node License, Index of Concepts, Maven, Top
@chapter Open Source License

@cindex license
@cindex open source license
This document is part of the SimpleMetrics project.

Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby
granted, provided that this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING
ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL,
DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
USE OR PERFORMANCE OF THIS SOFTWARE.

The author may be contacted via @uref{http://256.com/sources/simplemetrics/}

@c ----------------------------------------------------------------
@node Index of Concepts,, License, Top
@unnumbered Index of Concepts

@printindex cp

@ifhtml
@contents
@end ifhtml

@bye
